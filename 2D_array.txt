int[][] grid;
int rows, cols, w, h;
boolean[][] showNumbers;
int firstRow = -1, firstCol = -1; 
int secondRow = -1, secondCol = -1; 
boolean waitingForReset = false; 
int resetTime = 1000; 
int timerStart = 0; 
boolean gameWon = false;

void setup() {
    size(500, 500);
    strokeWeight(12);
    
    rows = 3;  
    cols = 4;  

    w = width / cols;
    h = height / rows;

    showNumbers = new boolean[rows][cols];
    grid = new int[rows][cols];

    generateRandomGrid();
    
    drawGrid();
}

void draw() {
    if (!gameWon) {
        drawGrid();
        drawNumbers();
        
        if (waitingForReset && millis() - timerStart >= resetTime) {
            showNumbers[firstRow][firstCol] = false;
            showNumbers[secondRow][secondCol] = false; 
            waitingForReset = false; 
            firstRow = -1; 
            firstCol = -1;
            secondRow = -1;
            secondCol = -1;
        }
        
        if (checkWin()) {
            gameWon = true;
        }
    } else {
        displayWinMessage();
    }
}

void generateRandomGrid() {
    int[] numbers = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6};

    for (int i = 0; i < rows * cols; i++) {
        int randomIndex = int(random(numbers.length)); 
        grid[i / cols][i % cols] = numbers[randomIndex]; 
        numbers[randomIndex] = numbers[numbers.length - 1]; 
        numbers = shorten(numbers); 
    }
}

void drawGrid() {
    background(255);
    
    int x = 0;
    int y = 0;

    while (y <= 500) {
        line(0, y, 500, y); 
        y += h;            
    }

    y = 0;
    while (x <= 500) {
        line(x, 0, x, 500);  
        x += w;            
    }
}

void drawNumbers() {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (showNumbers[i][j]) {
                draw_numbers(45 + j * w, 60 + i * h, grid[i][j]);
            }
        }
    }
}

void draw_numbers(int x, int y, int n) {
    fill(0);
    textSize(32);
    textAlign(CENTER, CENTER);
    text(n, x + 10, y + 20);
}

void mousePressed() {
    // ถ้าเกมชนะ ให้รีเซ็ตเกมเมื่อคลิกที่ใด ๆ
    if (gameWon) {
        resetGame(); 
        return; 
    }
    
    // ถ้ายังรอรีเซ็ต ไม่ทำอะไร
    if (waitingForReset) {
        return; 
    }

    int i = mouseY / h;
    int j = mouseX / w;
    
    // ตรวจสอบว่าคลิกที่ตำแหน่งที่ถูกต้องและยังไม่ได้เปิดเผย
    if (i >= 0 && i < rows && j >= 0 && j < cols && !showNumbers[i][j]) {
        showNumbers[i][j] = true;

        if (firstRow == -1 && firstCol == -1) {
            firstRow = i;
            firstCol = j;
        } else {
            secondRow = i;
            secondCol = j;

            if (grid[firstRow][firstCol] != grid[secondRow][secondCol]) {
                waitingForReset = true;
                timerStart = millis();
            } else {
                // ถ้าเลขตรงกัน ให้รีเซ็ตตัวแปรที่เกี่ยวข้อง
                firstRow = -1;
                firstCol = -1;
            }
        }
    }
}

boolean checkWin() {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (!showNumbers[i][j]) {
                return false;
            }
        }
    }
    return true;
}

void displayWinMessage() {
    background(255);
    fill(0);
    textSize(32);
    textAlign(CENTER, CENTER);
    text("You win!", width / 2, height / 2 - 20);
    textSize(20);
    text("Click to play again", width / 2, height / 2 + 20);
}

void resetGame() {
    firstRow = -1;
    firstCol = -1;
    secondRow = -1;
    secondCol = -1;
    waitingForReset = false;
    gameWon = false;
    showNumbers = new boolean[rows][cols]; 
    generateRandomGrid(); 
}
